apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ include "stack-tech.fullname" . }}-gca-tls
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: {{ .Values.spec.project }}
  source:
    repoURL: https://dev.azure.com/gca-trans/Devops/_git/Devops
    targetRevision: develop
    path: k3s/certificats
    directory:
      include: gca-tls.yaml
  destination:
    server: {{ .Values.spec.destination.server }}
    namespace: kube-system
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - PruneLast=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ include "stack-tech.fullname" . }}-traefik
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "2"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: {{ .Values.spec.project }}
  source:
    repoURL: https://traefik.github.io/charts
    targetRevision: '*'
    chart: traefik
    helm:
      releaseName: traefik
      valuesObject:
        deployment:
          podAnnotations:
            exporter: OTLP
        ingressRoute:
          dashboard:
            enabled: true
            entryPoints:
              - traefik
              - websecure
        logs:
          access:
            enabled: true
            fields:
              headers:
                names:
                  X-B3-Spanid: keep
                  X-B3-Traceid: keep
            format: json
        ports:
          websecure:
            exposedPort: 8443
        # publish the loadBalancer IP using publishedservice, which will update the Progressing State
        providers:
          kubernetesIngress:
            publishedService:
              enabled: true
        tlsStore:
          default:
            defaultCertificate:
              secretName: gca-tls
        tracing:
          zipkin:
            httpEndpoint: http://opentelemetry-collector.opentelemetry:9411/api/v2/spans
        metrics:
          prometheus:
            serviceMonitor: {}
            disableAPICheck: true
  destination:
    server: {{ .Values.spec.destination.server }}
    namespace: kube-system
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - PruneLast=true
---
